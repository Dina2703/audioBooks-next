

------------------What is Next.js-----------------
- Framework for creating pre-rendered React websites.
- offers us both Server Side Rendering & Static Site Generation (SSR) & (SSG)

* Server-Side rendering  - when React components are rendered into HTML pages on the server after a page request comes from the browser.
* Static Site Generation - when React components are rendered into HTML pages at built time, so that we can just deploy the web pages and JS bundles to the web. And NEXT.JS allows us easily do both of these things, meaning that our React components are already rendered into HTML pages by the time they reach the browser, now from that poit onward the application can behave more like an SPA (single page application), and all routing can be handled on the client side in the browser.
_______________SSG & SSR Benefits-------------------
 * Pre-rendering improves performance
 * Better Search Engine Optimization (SEO)

 _______________Start______________
 npx create-next-app projectName
________________Folders______________

 * node_modules - where our all the dependencies are stored.
 * pages - where our different page components are going to be created. in Next.js every page has its own react components.
 * index.js - index component for the home page.
 * _app.js - kinda like a root component, and all of our diffent page components are rendered right here.
 * api - folder  for api endpoints  
 * public folder - for public assets like images
 * styles - folder for different css filed and css modules 
 * .gitignore - for version control
 * package.json - files to keep track of our different dependencies 
 _________npm run dev  - command  runs 'next dev' which runs a local development server for us in localhost:3000, so we can preview our app in a browser.
 eveything you seen in the browser is created in the index.js component.
 REMEMBER: this component (index.js) was pre-pendered before reaches the browser. So server renderes the component then sends the HTML file to the browser. And that happents for each page request from the browser. If we type a different url it will look for the component for that url pre-redner it and send it to the browser.

 ---------Pages and Routes----------
 Each page component was it own file inside the 'pages' folder. The file name and location of each page component is tied to the route for that articular page.
 example: 'about.js' file inside pages folder, then NEXT will automatically create a route '/about', which is the name of the file, to serve up this components.
 So we create React component for this page inside this file. So route name tied to the file name.
One exception for the index.js, that NEXT does't create a route '\index', it just creates the route '/'.
And another exception for 404.js page, where NEXT does'n generate any url. instead NEXT creates a component, which renders for all all URLs that are does.t exist. You don't need to import this 404 page, NEXT does't it for you.

When we have a test.js file inside a subfolder Next will create a route for the file based on that subfolder. '/subfolder/test/',a route for  index.js which is inside a subfolder 'blogs', will have the '\blogs' route. Since index.js is exceptional.

in NEXT you can have reusable(or dropping) components like Nabvar component,  Contact-bar component.We DON"T CREATE them inside 'pages' folder,  for those kinda components we need a new folder inside your project root. 
Then you can drop this reusable component inside your page component.

-----------Layout file-------------
The Layout Component contains the Nabvar and the Footer. and will wrap all of our different pages,  inside app.js
{children} that we passing as props is anything nested inside this Layout component in the app.js(which are React pages). Now its pairing top(Navbar) and bottom(Footer) of all single page component.


__________________ Adding Styles in NEXT____________________
* can use global stylesheets for global common styles across the whole website.
* can use Styles JSX - which lets you write css in a React Component.
* use CSS Modules - which NEXT has built-in support for whereby each component can have its own unique scoped style sheet.

In this project we will use mix of global stylesheet and css modules. Global css file is already created for us inside the 'styles' folder, 'globals.css'. 
'globals.css' - so anything inside this file will apply to anything on the whole website. This file imported to the app.js file, where all of our pages rendered.

CSS MODULES allows us to write a stylesheet for each pahe component and then we import that stylesheet into whatever component needs it and NEXT is automatically going to scope those styles to that component by adding random characters next to the classNames and Selectors, that means that those styles will only apply to that component, and we don't have to worried about className conflict between different components and their stylesheets.
example: Home.module.css stylesheet inside the styles folder imported and  applied only to the index.js page, which is home page for our website.
These files for css modules take name moduleName.module.css 
IMPORTANT: use CLASS Selectors, NOT element selectors.
HOW TO USE Module CSS style  ----->
1. add some style in module.css file.(ex. 
.container {
background: red;
})
2. import to the page file, where you need will use
3. add className into element you need to apply it, like <div className={styles.container}>.  here we're appling container class to this div, via props 'styles'
Now if you check Elements tab you will see a new className on this div -> 'Home_container__bCOhY' last random characters where applyed by NEXT, if you use this {styles.container} inside another class, that element will have different className.


---------------useEffect hook--------------------
   *  useEffect is a React Hook, which fires a function when the components first mounts, means the user first sees the page in the browser.

  Into useEffect we pass two arguments, first the function that fires when the component first mountes, as a second argument we pass here an empty array in this example, which is the dependency array, when it's empty it means only fire this function once when the component mountes, and not again if any state changes.
   useEffect(() => {
     code to run when a component first mountes
   }, [])

   __________________Redirect in NEXT____________________

1. import { useRouter } from "next/router"; 
2. initialize useRouter hook and store its result inside a variable.
const router = useRouter();
this retuns to us a router object which contains a method that we can use to redirect the user. 
some methods on this (router) object:
router.go()  - this method allows us to go back and forth through the history, example: router.go(-1) takes back through history one step. router.go(1) takes forward  1 step
router.push()  - this method redirects to the route, which was passed, example: router.push('/') redirects to the Home page.


----------Metadata------------------
Metadat for adding custom title in the head for each page. The title in the head is the thing that shows in the top of tab. We can add custom title to every page, for that we need to import Head component like: import Head from "next/head"; then use it inside the return();
To do so, we need to use Head component, which provides by NEXT to index.js
<>
<Head>
  <title>Books shop | Home</title>
  <meta name='keywords' content='books'>
</Head>
<div>some content</div>
</Head>
</>
We also can add metadat inside this Head component, which we can see via inspect in the 'Elements' tab.

_____________________-Fetching Data(getStaticProps)__________________
we will use fake data from the  https://jsonplaceholder.typicode.com , will get data from the endpoint ---> https://jsonplaceholder.typicode.com/user
In normal React applications we might do this from useEffect() hook, and that would make the request in the browser, in our case with NEXT the components are all pre-rendered by the time they reach the browser, so ideally we want to fetch the data before they're rendered, so the renderd components have data in the template and to do this we can use a special function provided to us by NEXT.
Where we gonna fetch the data, in our case in index.js file inside  books folder,when we go to 'http://localhost:3000/books', in the file on the top we create a function getStaticProps. And this function runs at build time, as our app is built and our components rendered at this point we can add a fetch reduest inside it, to fetch any data we need for our component template. This function never runs in the browser only at build time, so DON'T write any code here that you expect to run in the browser.
export const getStaticProps = async () => {
  const res = await fetch("https://jsonplaceholder.typicode.com/users"); //pass the endpoint where we need the data fetch from.
  const data = await res.json();  
};
'data' is gonna be an array of objects.
HOW we use it inside the component?? 
we return a value from this getStaticProps() function, and this return is gonna be an object, and inside that we have a props property, we give the value as an object to it. And inside it we can pass different properties and values that we want make accessible inside our component as a prop.

export const getStaticProps = async () => {
  const res = await fetch("https://jsonplaceholder.typicode.com/users");
  const data = await res.json();
  return {
    props: { authors: data },
  };
};
NOW the data is available to us inside our component as props. we can destructure it from the props like so --->  const Books = ({ authors }) => {}
REMEMBER: getStaso it can be rendered with that data inside it.

________________Dynamic Routes [id].js______________
we need to make a route 'books/id', so for that we create a detailed page, which renders more details about the book/or item from the list, inside the books folder, so NEXT can creates appropiate route to the details page.
in NEXT a changeable route we represent with square brackets, so name of the file will be [id].js, id parameter will change depending which item clicked on.